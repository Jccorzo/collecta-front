{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\d.ocampo\\\\Documents\\\\Collecta\\\\collecta-front\\\\AuthProvider.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { createContext } from 'react';\nexport var AuthContext = createContext();\nexport default function AuthProvider(props) {\n  var _React$useReducer = React.useReducer(function (prevState, action) {\n    switch (action.type) {\n      case 'RESTORE_TOKEN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'SIGN_IN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: false,\n          userToken: action.token\n        });\n\n      case 'SIGN_OUT':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: true,\n          userToken: null\n        });\n    }\n  }, {\n    isLoading: true,\n    isSignout: false,\n    userToken: null\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    var bootstrapAsync = function bootstrapAsync() {\n      var userToken;\n      return _regeneratorRuntime.async(function bootstrapAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('userToken'));\n\n            case 3:\n              userToken = _context.sent;\n              navigation.navigate('Main');\n              _context.next = 9;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 9:\n              dispatch({\n                type: 'RESTORE_TOKEN',\n                token: userToken\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    };\n\n    bootstrapAsync();\n  }, []);\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn(username, password) {\n        return _regeneratorRuntime.async(function signIn$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(username, password);\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: 'dummy-auth-token'\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      signOut: function signOut() {\n        return dispatch({\n          type: 'SIGN_OUT'\n        });\n      },\n      signUp: function signUp(name, password, navigation) {\n        return _regeneratorRuntime.async(function signUp$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                console.log(name, password);\n                navigation.navigate('ConfirmCode');\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      confirmSignUp: function confirmSignUp(code) {\n        return _regeneratorRuntime.async(function confirmSignUp$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                dispatch({\n                  type: 'SIGN_IN',\n                  token: 'dummy-auth-token'\n                });\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }, []);\n  return React.createElement(AuthContext.Provider, {\n    value: {\n      state: state,\n      authContext: authContext\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["C:/Users/d.ocampo/Documents/Collecta/collecta-front/AuthProvider.js"],"names":["React","createContext","AuthContext","AuthProvider","props","useReducer","prevState","action","type","userToken","token","isLoading","isSignout","state","dispatch","useEffect","bootstrapAsync","AsyncStorage","getItem","navigation","navigate","authContext","useMemo","signIn","username","password","console","log","signOut","signUp","name","confirmSignUp","code","children"],"mappings":"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","sourcesContent":["import React, {createContext} from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport default function AuthProvider(props){\r\n    \r\n    const [state, dispatch] = React.useReducer(\r\n        (prevState, action) => {\r\n          switch (action.type) {\r\n            case 'RESTORE_TOKEN':\r\n              return {\r\n                ...prevState,\r\n                userToken: action.token,\r\n                isLoading: false,\r\n              };\r\n            case 'SIGN_IN':\r\n              return {\r\n                ...prevState,\r\n                isSignout: false,\r\n                userToken: action.token,\r\n              };\r\n            case 'SIGN_OUT':\r\n              return {\r\n                ...prevState,\r\n                isSignout: true,\r\n                userToken: null,\r\n              };\r\n          }\r\n        },\r\n        {\r\n          isLoading: true,\r\n          isSignout: false,\r\n          userToken: null,\r\n        }\r\n      );\r\n    \r\n    \r\n      React.useEffect(() => {\r\n        // Fetch the token from storage then navigate to our appropriate place\r\n        const bootstrapAsync = async () => {\r\n          let userToken;\r\n\r\n          try {\r\n            userToken = await AsyncStorage.getItem('userToken');\r\n            navigation.navigate('Main')\r\n          } catch (e) {\r\n            // Restoring token failed\r\n          }\r\n    \r\n          // After restoring token, we may need to validate it in production apps\r\n    \r\n          // This will switch to the App screen or Auth screen and this loading\r\n          // screen will be unmounted and thrown away.\r\n          dispatch({ type: 'RESTORE_TOKEN', token: userToken });\r\n        };\r\n    \r\n        bootstrapAsync();\r\n      }, []);\r\n\r\n      const authContext = React.useMemo(\r\n        () => ({\r\n          signIn: async (username, password) => {\r\n            // In a production app, we need to send some data (usually username, password) to server and get a token\r\n            // We will also need to handle errors if sign in failed\r\n            // After getting token, we need to persist the token using `AsyncStorage`\r\n            // In the example, we'll use a dummy token\r\n            console.log(username,password);\r\n            dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' });\r\n          },\r\n          signOut: () => dispatch({ type: 'SIGN_OUT' }),\r\n          signUp: async (name, password, navigation) => {\r\n            // In a production app, we need to send user data to server and get a token\r\n            // We will also need to handle errors if sign up failed\r\n            // After getting token, we need to persist the token using `AsyncStorage`\r\n            // In the example, we'll use a dummy token\r\n            console.log(name,password);\r\n            navigation.navigate('ConfirmCode');\r\n            \r\n          },\r\n          confirmSignUp: async code => {\r\n            dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' }); \r\n          }\r\n        }),\r\n        []\r\n      );\r\n         \r\n      return(\r\n          <AuthContext.Provider value={{state, authContext}}>\r\n            {props.children}\r\n          </AuthContext.Provider>\r\n      );\r\n}"]},"metadata":{},"sourceType":"module"}