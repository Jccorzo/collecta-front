{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\d.ocampo\\\\Documents\\\\Collecta\\\\collecta-front\\\\App.js\";\nimport React from 'react';\nimport { SplashScreen, AppLoading } from 'expo';\nimport Amplify from 'aws-amplify';\nimport * as Font from 'expo-font';\nimport { Asset } from 'expo-asset';\nimport awsconfig from \"./aws-exports\";\nimport AuthProvider from \"./AuthProvider\";\nimport AppNavigator from \"./navigation/AppNavigator\";\nimport View from \"react-native-web/dist/exports/View\";\nAmplify.configure(awsconfig);\nexport default function App() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isReady = _React$useState2[0],\n      setIsReady = _React$useState2[1];\n\n  var loadFontsAsync = function loadFontsAsync() {\n    return _regeneratorRuntime.async(function loadFontsAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Font.loadAsync({\n              'roboto-light': require(\"./assets/fonts/RobotoSlab-Light.ttf\"),\n              'roboto-regular': require(\"./assets/fonts/RobotoSlab-Regular.ttf\"),\n              'roboto-bold': require(\"./assets/fonts/RobotoSlab-Bold.ttf\"),\n              'roboto-black': require(\"./assets/fonts/RobotoSlab-Black.ttf\")\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var loadResourcesAndDataAsync = function loadResourcesAndDataAsync() {\n    return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(Promise.all([loadFontsAsync()]));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  React.useEffect(function () {\n    SplashScreen.preventAutoHide();\n    loadResourcesAndDataAsync().then(function () {\n      setIsReady(true);\n    }).catch(function (e) {\n      return console.warn(e);\n    });\n    SplashScreen.hide();\n  }, []);\n\n  if (!isReady) {\n    return null;\n  } else {\n    return React.createElement(AuthProvider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, React.createElement(AppNavigator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }));\n  }\n}","map":{"version":3,"sources":["C:/Users/d.ocampo/Documents/Collecta/collecta-front/App.js"],"names":["React","SplashScreen","AppLoading","Amplify","Font","Asset","awsconfig","AuthProvider","AppNavigator","configure","App","useState","isReady","setIsReady","loadFontsAsync","loadAsync","require","loadResourcesAndDataAsync","Promise","all","useEffect","preventAutoHide","then","catch","e","console","warn","hide"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,MAAzC;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAAQC,KAAR,QAAoB,YAApB;AAEA,OAAOC,SAAP;AAEA,OAAOC,YAAP;AACA,OAAOC,YAAP;;AAGAL,OAAO,CAACM,SAAR,CAAkBH,SAAlB;AAEA,eAAe,SAASI,GAAT,GAAc;AAAA,wBACGV,KAAK,CAACW,QAAN,CAAe,KAAf,CADH;AAAA;AAAA,MACpBC,OADoB;AAAA,MACXC,UADW;;AAG7B,MAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACfV,IAAI,CAACW,SAAL,CAAe;AACnB,8BAAgBC,OAAO,uCADJ;AAEnB,gCAAkBA,OAAO,yCAFN;AAGnB,6BAAeA,OAAO,sCAHH;AAInB,8BAAgBA,OAAO;AAJJ,aAAf,CADe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAkBA,MAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAC1BC,OAAO,CAACC,GAAR,CAAY,CAACL,cAAc,EAAf,CAAZ,CAD0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC;;AAIGd,EAAAA,KAAK,CAACoB,SAAN,CAAgB,YAAM;AACrBnB,IAAAA,YAAY,CAACoB,eAAb;AACAJ,IAAAA,yBAAyB,GAAGK,IAA5B,CAAiC,YAAI;AAACT,MAAAA,UAAU,CAAC,IAAD,CAAV;AAAiB,KAAvD,EAAyDU,KAAzD,CAA+D,UAAAC,CAAC;AAAA,aAAEC,OAAO,CAACC,IAAR,CAAaF,CAAb,CAAF;AAAA,KAAhE;AACAvB,IAAAA,YAAY,CAAC0B,IAAb;AACD,GAJA,EAIE,EAJF;;AAMD,MAAG,CAACf,OAAJ,EAAY;AACV,WAAO,IAAP;AACD,GAFD,MAEM;AACJ,WACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;AACF","sourcesContent":["import React from 'react';\r\nimport { SplashScreen, AppLoading } from 'expo';\r\nimport Amplify from 'aws-amplify';\r\nimport * as Font from 'expo-font';\r\nimport {Asset} from 'expo-asset';\r\n\r\nimport awsconfig from './aws-exports'; \r\n\r\nimport AuthProvider from './AuthProvider';\r\nimport AppNavigator from './navigation/AppNavigator';\r\nimport { View } from 'react-native';\r\n\r\nAmplify.configure(awsconfig);\r\n\r\nexport default function App(){\r\n  const [isReady, setIsReady] = React.useState(false);\r\n\r\nconst loadFontsAsync = async () => {\r\n  await Font.loadAsync({\r\n    'roboto-light': require('./assets/fonts/RobotoSlab-Light.ttf'),\r\n    'roboto-regular': require('./assets/fonts/RobotoSlab-Regular.ttf'),\r\n    'roboto-bold': require('./assets/fonts/RobotoSlab-Bold.ttf'),\r\n    'roboto-black': require('./assets/fonts/RobotoSlab-Black.ttf'),\r\n    })\r\n}\r\n\r\n/* const loadImagesAsync = async () => {\r\n  const images = [require('./assets/images/splash2.png'),\r\n                  require('./assets/images/DefaultBarberImage.png'),\r\n                  require('./assets/images/log-in-image.png')]\r\n\r\n      const cacheImages = images.map(image => {return Asset.fromModule(image).downloadAsync();}); \r\n    await Promise.all(cacheImages)                \r\n}\r\n */\r\nconst loadResourcesAndDataAsync = async () => {\r\n  await Promise.all([loadFontsAsync(), /* loadImagesAsync() */])\r\n}   \r\n  \r\n   React.useEffect(() => {\r\n    SplashScreen.preventAutoHide();  \r\n    loadResourcesAndDataAsync().then(()=>{setIsReady(true)}).catch(e=>console.warn(e));\r\n    SplashScreen.hide();\r\n  }, []); \r\n\r\n  if(!isReady){\r\n    return null\r\n  }else {\r\n    return(\r\n      <AuthProvider>\r\n        <AppNavigator/>\r\n      </AuthProvider>\r\n    );\r\n  }\r\n}\r\n \r\n"]},"metadata":{},"sourceType":"module"}